# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: wordless
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: wordless-backend-emote
# "service" is the name of this project. This will also be added to your AWS resource names.
service: wordless-backend-emote

stages:
  default:
    params:
      UserConnectionTableName: "user-connection-table-${sls:stage}"
      EmoteTableName: "emote-table-${sls:stage}"
      EmoteReactionTableName: "emote-reaction-table-${sls:stage}"
      UserTableName: "user-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    USER_CONNECTION_TABLE: ${param:UserConnectionTableName}
    EMOTE_TABLE: ${param:EmoteTableName}
    EMOTE_REACTION_TABLE: ${params.EmoteReactionTableName}
    USER_TABLE: ${param:UserTableName}

functions:
  connect:
    handler: onconnect/handler.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: ondisconnect/handler.disconnect
    events:
      - websocket:
          route: $disconnect
  default:
    handler: sendEmotes/handler.sendEmotes
    events:
      - websocket:
          route: $default

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        UserConnectionTableName: ${param:UserConnectionTableName}
        EmoteTableName: ${param:EmoteTableName}
        UserTableName: ${param:UserTableName}
